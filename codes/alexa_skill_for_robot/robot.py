## Project Name:	gesture controled & voice designated robotic hand using myograph sensors
## Author List:		Abhinav Lakhani
## file name:		robot.py
## Functions:		np, Arduino, util, sp, sys, time, sigmoid, predict, (class)stepper, (class)stepper, busio, 
## Global Variables:boarda, n, m, a, q, b, X, stepper_a, i, delay, i2c, mpr121

#? import python serial library for controlling arduino
from pyfirmata import Arduino, util
#? import data processing libraries
import numpy as np
import scipy as sp
#? import user defined functions & data from user defined library
from lib import *
#? initialize which arduino used & port used
#boarda = Arduino('/dev/ttyUSB0')
boarda = Arduino('/dev/ttyACM0')
#boarda = Arduino('/dev/ttyACM1')
#* remember to exit the arduino when done using it.
#* by running below line(uncomment first) after done working.
#* boarda.exit()

#? check if the board is working by,
#? blinking inbuilt leds at the start of the code
boarda.digital[13].write(1)
boarda.digital[13].write(0)

#? start iterstor instance for capturing analog readings
it = util.Iterator(boarda)
it.start()
n = 10  # sampling rate
m=7
#* matrices to process a sample data
a = np.mat(np.zeros((n,), dtype=np.float))
q = np.mat(a[0,1:])
b = np.concatenate((a, q), axis=1)
X = np.mat(np.zeros((5,16), dtype=np.float))

#? enable analog analog
boarda.analog[0].enable_reporting()
boarda.analog[1].enable_reporting()

#? initialize steppers
stepper_a = stepper(boarda,2,3,4,5,6,7,8,9,10,11,12,13)

#? initialize starting angle positions of stepper
#? -60 == hand closed
#? 60 == hand opened
i = 60
delay = 100

#? Initialize communication with MPR121 using default I2C bus of device, and
#? default I2C address (0x5A).  On BeagleBone Black will default to I2C bus 0.
i2c = busio.I2C(bd.SCL, bd.SDA)
 
#* Create MPR121 object.
mpr121 = adafruit_mpr121.MPR121(i2c)
    
while(True):   
    #? open message file generated by alexa in read mode
    file = open("message.txt", "r")    
    #? read one line at a time
    msg = file.readline()    
    if not msg == None:
        hand, gesture, robo = int(msg[0]), int(msg[2]), int(msg[-1])
    #print(hand, gesture, robo, msg, mpr121.touched())    
    if robo == 1:
        if (hand == 0 and gesture == 0):            
            while (i < 60):
                #* hand open
                stepper_a.step(0.001*1, 1)
                i += 1
        elif (hand == 1 and gesture == 0):
            #* hand open
            while (mpr121.touched() < 2 and i > -60 and mpr121.touched() < 1024):
                stepper_a.step(0.001*1, -1)
                i -= 1
        elif (gesture == 1):
            #* capture analog
            t0 = boarda.analog[0].read()
            t1 = boarda.analog[1].read()
            #* if analog values are NULL then zero
            if (t0 == None or t1 == None):
                t0 = 0
                t1 = 0
            #* update the matrix
            a = np.concatenate((a[0,1:], np.mat(t0)), axis=1)
            b = np.concatenate((a[0,1:], np.mat(t1)), axis=1)
            #* RMS value of signal
            RMS1 = np.sqrt(np.sum(np.power(a,2))/n)
            RMS2 = np.sqrt(np.sum(np.power(b,2))/n)
            #* mean of signal
            MEAN1 = np.mean(a)
            MEAN2 = np.mean(b)
            X[0,0:7] = a[0,-1:n-(7+1):-1]
            X[0, 7] = RMS1
            X[0, 8] = MEAN1
            X[0,9:16] = b[0,-1:n-(7+1):-1]            
            X[0,16] = RMS2
            X[0,17] = MEAN2
            #print(X)
            y = predict(theta, X)
            X[4,:] = X[3,:]
            X[3,:] = X[2,:]
            X[2,:] = X[1,:]
            X[1,:] = X[0,:]            
            #print(str(y.transpose()) + '\t')
            #print(y.transpose(), np.mean(y), t0, t1)
            if (np.mean(y) > 0.6 and i > -60 and delay <= 0 and mpr121.touched() < 2 and mpr121.touched() < 1024):
                #board.digital[13].write(1) #* blink inbuilt LED
                stepper_a.step(0.001*1, -1)
                i -= 1
            elif (np.mean(y) <= 0.55 and i < 60 and delay <= 0):
                #board.digital[13].write(0) #* blink inbuilt LED
                stepper_a.step(0.001*1, 1)
                i += 1
            elif (delay > 0):
                delay -= 1
            boarda.pass_time(.001)
    else:
        #* exit the board
        boarda.exit()
        #* close the file
        file.close()
        break
    #* close the file
    file.close()
